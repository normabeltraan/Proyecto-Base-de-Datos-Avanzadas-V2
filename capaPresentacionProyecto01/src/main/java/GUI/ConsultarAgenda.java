/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BO.MedicoBO;
import Configuracion.DependencyInjector;
import DTO.CitaDTO;
import DTO.MedicoDTO;
import DTO.UsuarioDTO;
import Exception.NegocioException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que permite consultar la agenda de un médico y atender las 
 * citas que tenga.
 * @author norma
 */
public class ConsultarAgenda extends javax.swing.JFrame {

    private MedicoDTO medico;
    private MedicoBO medicoBO = DependencyInjector.crearMedicoBO();

    /**
     * Constructor de la clase ConsultarAgenda.
     * Inicializa los componentes gráficos.
     * Establece la fecha actual en la interfaz.
     * Carga la agenda del médico.
     * @param medicoDTO objeto que contiene los datos del médico
     */
    public ConsultarAgenda(MedicoDTO medicoDTO) {
        this.medico = medicoDTO;
        initComponents();
        fechaActual();
        try {
            agendaMedico();
        } catch (NegocioException ex) {
            Logger.getLogger(ConsultarAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFechaActual = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablacitas = new javax.swing.JTable();
        btnCancelar = new javax.swing.JButton();
        btnAtenderCita = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Consultar Agenda");

        jLabel2.setText("Fecha");

        tablacitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Fecha y hora", "Tipo", "Paciente"
            }
        ));
        jScrollPane1.setViewportView(tablacitas);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAtenderCita.setText("Atender Cita");
        btnAtenderCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtenderCitaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(191, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAtenderCita)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAtenderCita))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que se ejecuta cuando se hace click en "Cancelar".
     * Regresa al perfil del médico, cerrando la ventana de consulta de agenda.
     * @param evt Evento generado por la acción del botón.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        new PerfilMedico(medico).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Método que se invoca cuando se hace click en el botón de "Atender Cita".
     * Verifica el tipo de cita y te dirige al formulario para atender la cita.
     * @param evt 
     */
    private void btnAtenderCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtenderCitaActionPerformed
        try {
            pantallaSegunTipoDeConsulta();
        } catch (NegocioException ex) {
            Logger.getLogger(ConsultarAgenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAtenderCitaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtenderCita;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablacitas;
    private javax.swing.JTextField txtFechaActual;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que se encarga ed cargar la agenda del médico y muestra las citas
     * que tiene.
     * Obtiene las citas a través de la capa de negocio y las muestra en un
     * JTable
     * @throws NegocioException Por si ocurre un error al obtener las citas del médico.
     */
    private void agendaMedico() throws NegocioException {
        UsuarioDTO usuarioDTO = medico.getUsuario();
        List<CitaDTO> citas = medicoBO.obtenerAgendaMedico(usuarioDTO);

        DefaultTableModel model = (DefaultTableModel) tablacitas.getModel();
        model.setRowCount(0);

        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

        for (CitaDTO cita : citas) {
            String hora = sdf.format(cita.getFecha_hora());

            model.addRow(new Object[]{
                hora,
                cita.getTipo(),
                cita.getPaciente().getNombre()
            });
        }

    }

    /**
     * Método que muestra la fecha actual en el campo de texto
     * La fecha se muestra en formato dia, mes y año ("dd/MM/yyyy")
     */
    private void fechaActual() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        String fechaActual = sdf.format(new Date());

        txtFechaActual.setText(fechaActual);
        txtFechaActual.setEditable(false);
    }

    /**
     * Método que verifica el tipo de cita seleccionada en la tabla para redirigirte
     * a su respectiva pantalla (ya sea de citas agendadas o de citas de emergencia).
     * Si no se seleccionó niniguna fila, entonces muestra un mensaje de error.
     * @throws NegocioException En caso de que ocurra un error al obtener las citas
     */
    private void pantallaSegunTipoDeConsulta() throws NegocioException {
        int filaSeleccionada = tablacitas.getSelectedRow();
        if (filaSeleccionada != -1) {

            List<CitaDTO> citas = medicoBO.obtenerAgendaMedico(medico.getUsuario());

            CitaDTO cita = citas.get(filaSeleccionada);

            String tipoCita = (String) tablacitas.getValueAt(filaSeleccionada, 1);

            if ("Cita Agendada".equals(tipoCita)) {
                new AtenderConsulta(medico, cita).setVisible(true);
            } else if ("Cita Emergencia".equals(tipoCita)) {
                new AtenderConsultaEmergencia(medico, cita).setVisible(true);
            }
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una cita.");
        }
    }
}
