/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BO.CitaBO;
import BO.MedicoBO;
import Configuracion.DependencyInjector;
import DTO.CitaDTO;
import DTO.HorarioDisponibleDTO;
import DTO.MedicoDTO;
import DTO.PacienteDTO;
import Exception.NegocioException;
import Mapper.MedicoMapper;
import Mapper.PacienteMapper;
import entidades.Medico;
import entidades.Paciente;
import excepciones.PersistenciaException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que utiliza interfaz gráfica para agendar citas médicas.
 * Permite que los pacientes elijan la especialidad, mmédico,
 * fecha y hora de la cita
 * @author norma
 */
public class AgendarCita extends javax.swing.JFrame {

    private PacienteDTO paciente;
    private CitaBO citaBO = DependencyInjector.crearCitaBO();
    private MedicoBO medicoBO = DependencyInjector.crearMedicoBO();
    private DefaultTableModel modeloTabla;

    /**
     * Constructor de la clase 
     * @param pacienteDTO Es el objeto que representa al paciente
     * que agenda la cita.
     */
    public AgendarCita(PacienteDTO pacienteDTO) {
        this.paciente = pacienteDTO;
        initComponents();
        cargarEspecialidades();
        modeloTabla = new DefaultTableModel(new Object[]{"Fecha", "Hora"}, 0);
        tablaHorarios.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtEspecialidad = new javax.swing.JComboBox<>();
        txtMedico = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHorarios = new javax.swing.JTable();
        btnConfirmarCita = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Agendar Cita");

        txtEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txtEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEspecialidadActionPerformed(evt);
            }
        });

        txtMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txtMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicoActionPerformed(evt);
            }
        });

        jLabel2.setText("Especialidad");

        jLabel3.setText("Médico");

        jLabel4.setText("Fecha");

        txtFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFechaPropertyChange(evt);
            }
        });

        tablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Fecha", "Hora"
            }
        ));
        jScrollPane1.setViewportView(tablaHorarios);

        btnConfirmarCita.setText("Confirmar Cita ");
        btnConfirmarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarCitaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEspecialidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtMedico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirmarCita)))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmarCita)
                    .addComponent(btnCancelar))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método invocado al presionar el botón de "Confirmar cita".
     * Agenda la cita con los datos proporcionados.
     * @param evt Evento de acción
     */
    private void btnConfirmarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarCitaActionPerformed
        agendarCita();
    }//GEN-LAST:event_btnConfirmarCitaActionPerformed

    /**
     * Método que regresa a la pantalla del perfil del paciente.
     * Se invoca cuando se presiona el botón "Cancelar".
     * @param evt evento de acción
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        new PerfilPaciente(paciente).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Método que aparece al seleccionar una especialidad.
     * Carga los médicos que estén disponibles para la especialidad que s
     * se seleccionó.
     * @param evt Evento de acción.
     */
    private void txtEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEspecialidadActionPerformed
        cargarMedicosPorEspecialidad();
    }//GEN-LAST:event_txtEspecialidadActionPerformed

    /**
     * Método invocado al cambiar la fecha seleccionada
     * Carga los horarios disponibles para la fecha y médico elegidos.
     * @param evt Evento de cambio de propiedad
     */
    private void txtFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtFechaPropertyChange
        try {
            cargarHorariosDisponibles();
        } catch (PersistenciaException ex) {
            Logger.getLogger(AgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtFechaPropertyChange

    /**
     * Método que se invoca al seleccionar el médico.
     * Carga los horarios disponibles que tenga el médico en cuestión
     * y la fecha elegida.
     * @param evt Evento de acción.
     */
    private void txtMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicoActionPerformed
        try {
            cargarHorariosDisponibles();
        } catch (PersistenciaException ex) {
            Logger.getLogger(AgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtMedicoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmarCita;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaHorarios;
    private javax.swing.JComboBox<String> txtEspecialidad;
    private com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JComboBox<String> txtMedico;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para mostrar las especialidades médicas que estén
     * disponibles en el combobox
     */
    private void cargarEspecialidades() {
        List<String> especialidades = medicoBO.obtenerEspecialidades();
        if (especialidades != null) {
            txtEspecialidad.removeAllItems();
            for (String especialidad : especialidades) {
                txtEspecialidad.addItem(especialidad);
            }
        }
    }

    /**
     * Método para mostrar los médicos que estén disponibles 
     * según la especialidad que se haya seleccionado.
     */
    private void cargarMedicosPorEspecialidad() {
        String especialidad = (String) txtEspecialidad.getSelectedItem();
        List<MedicoDTO> medicos = medicoBO.obtenerMedicosPorEspecialidad(especialidad);
        if (medicos != null) {
            txtMedico.removeAllItems();
            for (MedicoDTO medico : medicos) {
                txtMedico.addItem(medico.getNombre());
            }
        }
    }

    /**
     * Obtiene el id del médico que se seleccionó
     * @return El ID del médico, o -1 si no se encontró
     */
    private int obtenerIdMedico() {
        String nombreMedico = (String) txtMedico.getSelectedItem();
        List<MedicoDTO> medicos = medicoBO.obtenerMedicosPorEspecialidad((String) txtEspecialidad.getSelectedItem());
        for (MedicoDTO medico : medicos) {
            if (medico.getNombre().equals(nombreMedico)) {
                return medico.getUsuario().getId_usuario();
            }
        }
        return -1;
    }

    /**
     * Método que carga los horarios disponibles del médico 
     * seleccionado para la fecha indicada.
     * @throws PersistenciaException En caso de error al obtener los horarios
     */
    private void cargarHorariosDisponibles() throws PersistenciaException {
        java.util.Date fecha = txtFecha.getDate();
        if (fecha != null && txtMedico.getSelectedIndex() != -1) {
            int idMedico = obtenerIdMedico();

            java.sql.Date sqlFecha = new java.sql.Date(fecha.getTime());

            List<HorarioDisponibleDTO> horarios = citaBO.obtenerHorariosDisponibles(sqlFecha, idMedico);
            if (horarios != null) {
                modeloTabla.setRowCount(0);
                for (HorarioDisponibleDTO horario : horarios) {
                    modeloTabla.addRow(new Object[]{horario.getFecha(), horario.getHora_disponible()});
                }
            }
        }
    }

    /**
     * Método que sirve para agendar la cita médica con la información
     * que se seleccionó.
     */
    private void agendarCita() {
        try {
            java.util.Date fecha = txtFecha.getDate();
            int idMedico = obtenerIdMedico();
            int filaSeleccionada = tablaHorarios.getSelectedRow();

            if (filaSeleccionada != -1) {

                java.sql.Time horaSeleccionada = (java.sql.Time) tablaHorarios.getValueAt(filaSeleccionada, 1);

                String horaString = convertirHoraATexto(horaSeleccionada);

                int horas = Integer.parseInt(horaString.split(":")[0]);
                int minutos = Integer.parseInt(horaString.split(":")[1]);

                LocalDateTime fechaHora = fecha.toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDateTime()
                        .withHour(horas).withMinute(minutos).withSecond(0).withNano(0);

                Timestamp fechaHora2 = Timestamp.valueOf(fechaHora);

                MedicoDTO medico = medicoBO.obtenerMedicoPorId(idMedico);

                MedicoMapper medicoMapper = new MedicoMapper();
                Medico medico2 = medicoMapper.toEntity(medico);

                PacienteMapper pacienteMapper = new PacienteMapper();
                Paciente paciente2 = pacienteMapper.toEntity(paciente);

                CitaDTO citaNuevo = new CitaDTO(fechaHora2, "Activa", "Cita Agendada", paciente2, medico2);
                boolean citaAgendada = citaBO.agendarCita(citaNuevo);

                if (citaAgendada) {
                    JOptionPane.showMessageDialog(this, "Cita agendada exitosamente");
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo agendar la cita");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un horario de la tabla");
            }
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } catch (PersistenciaException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado al agendar la cita: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método que convierte un objeto Time a 
     * texto HH:mm (hora, minutos).
     * @param hora La hora en formato Time
     * @return La hora en formato de texto HH:mm
     */
    private String convertirHoraATexto(java.sql.Time hora) {
        if (hora != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
            return sdf.format(hora);
        }
        return "";
    }

}
